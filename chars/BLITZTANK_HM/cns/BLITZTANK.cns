
;===========================================================================
; コンスタンツ（定数）
;===========================================================================
;---------------------------------------------------------------------------
; ここがキャラの心臓部とも言うべき場所。
; １キャラ単位のライフや大きさなど、標準のステータスを予め決めておく部分。
; このコーナー自体省略出来ません。
;---------------------------------------------------------------------------
; 基本データ
;---------------------------------------------------------------------------
[Data]
life              = 1000   ;ライフ（体力ゲージ）最大値
power             = 3000   ;パワーゲージ最大値（オプション・デフォルトは3000=Lv.3）
attack            = 100    ;攻撃力（デフォルトは１００％）
defence           = 110    ;防御力（デフォルトは１００％）
fall.defence_up   = 50     ;横に倒れている時に一時的に加える防御力（％）
liedown.time      = 60     ;横に倒れている時間（フレーム）
airjuggle         = 15     ;ジャグルポイント限界値（「小ネタ.txt」参照）
sparkno           = 2      ;デフォルトのヒットスパーク（fightfxから）
guard.sparkno     = 40     ;デフォルトのガードスパーク（fightfxから）
KO.echo           = 0      ;ＫＯ時の音声（11,0）にエコーを掛けるか否か（0=掛けない,1=掛ける）
volume            = 0      ;キャラの標準の音量（最小-255・最大255）
IntPersistIndex   = 60     ;次のラウンドへ持ち越せる「Var」のアドレスの範囲を決める（※１）
FloatPersistIndex = 40     ;次のラウンドへ持ち越せる「FVar」のアドレスの範囲を決める（※１）

;---------------------------------------------------------------------------
; ※１：変数のラウンド持ち越し方法
;
; 　変数を次のラウンドへ持ち越したい場合は、↑の
; 　「IntPersistIndex」と「FloatPersistIndex」を使う。
; 　そのやり方はM.U.G.E.Nの説明書にすら載ってないので、ここで例を元に解説。
;
; 　①IntPersistIndex = 23　（Var(22)～Var(59)までを全て次のラウンドへ持ち越せる）
; 　②FloatPersistIndex = 18（FVar(17)～FVar(39)までを全て次のラウンドへ持ち越せる）
;
; 　つまり「Var(**)（Fvar(**)）以降全ての変数を持ち越す」という命令になる。
; 　（「**」には『PersistIndexで設定した数字から１を引いたアドレス』が該当）
; 　それ以前のアドレスの変数は全て持ち越さなくなる。
;
; 　全ての変数を持ち越さない場合は、
; 　IntPersistIndexは60以上、FloatPersistIndexは40以上にしておこう。
;
; 　×これはダメ×
; 　　①IntPersistIndex = 10,15,20,25　（15,20,25の部分は意味無し）
; 　　②FloatPersistIndex = 4,16 　　　（16の部分は意味無し）
; 　　これらは最初の数字以外全て無効。
; 
;---------------------------------------------------------------------------
; 改訂前の和訳ＫＦＭではPersistIndexの解釈が無茶苦茶間違ってました。
; 大変失礼致しました。(人・ω・｀)ごめんなさい
; 今回はちゃんと調べて正確な情報を載せてるんで安心してください（苦笑
;---------------------------------------------------------------------------
; サイズ
;---------------------------------------------------------------------------
[Size]
xscale           = 0.5       ;キャラの横の大きさ（絶対値・float）
yscale           = 0.5       ;キャラの縦の大きさ（絶対値・float）
ground.back      = 40      ;地上にいる時の「後方の物理的な幅」
ground.front     = 30      ;地上にいる時の「前方の物理的な幅」
air.back         = 40      ;空中にいる時の「後方の物理的な幅」
air.front        = 30      ;空中にいる時の「前方の物理的な幅」
height           = 60      ;キャラの物理的な高さ（高いほど相手は飛び越しにくくなる）
attack.dist      = 160     ;相手がガード態勢に入る最低の距離
proj.attack.dist = 90      ;自分の「Projectile」に対して相手がガード態勢に入る最低の距離
proj.doscale     = 1       ;xscaleとyscaleを「Projectile」にも影響させるか否か（0=させない・1=させる）
head.pos         = -5,-150  ;キャラの標準の頭の座標（Bind系で適用される）
mid.pos          = -5,-60  ;キャラの標準の体中心の座標（Bind系で適用される）
shadowoffset     = 0       ;影のＹ軸方向の位置座標
draw.offset      = 0,0     ;キャラの表示座標（Ｘ軸,Ｙ軸）

;---------------------------------------------------------------------------
; 移動速度
;---------------------------------------------------------------------------
[Velocity]
walk.fwd     = 3.0         ;前進速度（Ｘ軸・[Statedef 20]に適用される）
walk.back    = -2.5        ;後退速度（Ｘ軸・[Statedef 20]に適用される）
run.fwd      = 5.5,0       ;前方に走る速度（Ｘ軸,Ｙ軸・[Statedef 100]に適用される）
run.back     = -5.0,0   ;後方に走る速度（Ｘ軸,Ｙ軸・[Statedef 105]に適用される）
jump.neu     = 0,-11.8     ;垂直ジャンプの速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
jump.back    = -3.0       ;後方ジャンプの速度（Ｘ軸・[Statedef 40]に適用される）
jump.fwd     = 3.0         ;前方ジャンプの速度（Ｘ軸・[Statedef 40]に適用される）
runjump.back = -2.55,-8.1  ;後方に走ってからのジャンプ速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
runjump.fwd  = 4,-8.1      ;前方に走ってからのジャンプ速度（Ｘ軸,Ｙ軸・[Statedef 40]に適用される）
airjump.neu  = 0,-8.1      ;空中垂直ジャンプ速度（Ｘ軸,Ｙ軸・[Statedef 45]に適用される）
airjump.back = -2.55       ;空中後方ジャンプ速度（Ｘ軸・[Statedef 45]に適用される）
airjump.fwd  = 2.5         ;空中前方ジャンプ速度（Ｘ軸・[Statedef 45]に適用される）

;---------------------------------------------------------------------------
; 運動関係
;---------------------------------------------------------------------------
[Movement]
airjump.num     = 0        ;空中ジャンプが出来る回数
airjump.height  = 35       ;空中ジャンプが出来る最低の高度（Ｙ軸）
yaccel          = .5      ;Ｙ軸加速度（重力）
stand.friction  = .85      ;立っている時の摩擦係数（ステートのPhysicsが「S」の時）
crouch.friction = .82      ;しゃがんでいる時の摩擦係数（ステートのPhysicsが「C」の時）

;===========================================================================
; ステート
;===========================================================================
;---------------------------------------------------------------------------
; ここからはキャラのそれぞれの行動（ステート）を設定する。
; 番号（ステートナンバー）に気を付ければ良いだけで、
; 行動の決め方もステートの数も作りたいキャラによって自由。
;
; 本来ステートは別のファイルとして扱っているものだけど、
; このようにコンスタンツファイルと一緒にまとめる事も可能。
;
; ステートの基本的な設定はおまけフォルダの「テンプレート.txt」を参照。
;===========================================================================
; 追加行動
;===========================================================================
;---------------------------------------------------------------------------
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	立ちやられ
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 5000]
type    = S
movetype= H
physics = N
velset = 0,0

[State 5000, アニメ変更] ;Light～Hard
type = ChangeAnim
trigger1 = Time = 0
trigger1 = GetHitVar(animtype) != [3,5]
value = ifelse((GetHitVar(groundtype) = 1),5000,5010) + GetHitVar(animtype)
;受けたHitdefのanimtype（やられの強さ）を判定して表示するアニメを決定
;ground.type = 1（High）である場合は立ちやられを、それ以外はしゃがみやられを表示
;animtype   ：0 - light, 1 - medium, 2 - hard, 3 - back, 4 - up, 5 - diag-up
;ground.type：0 - non,   1 - high,   2 - low,  3 - trip

[State 5000, アニメ変更] ;吹っ飛び開始
type = ChangeAnim
trigger1 = Time = 0
trigger1 = GetHitVar(animtype) = [3,5]
value = 5030
;「back」「up」「diag-up」のいずれかの場合吹っ飛びのアニメに

[State 5000, アニメ変更] ;垂直吹っ飛び・対角吹っ飛び (オプション)
type = ChangeAnim
trigger1 = Time = 0
trigger1 = (GetHitVar(animtype) = [4,5]) && (SelfAnimExist(5047 + GetHitVar(animtype)))
value = 5047 + GetHitVar(animtype) ;5051 - 4 + type
;垂直吹っ飛びなら5047、対角吹っ飛びなら5048を表示。アニメがなければ5030が表示される。

[State 5000, アニメ変更] ;Freeze anim
type = ChangeAnim
trigger1 = Time > 0
value = anim

[State 5000, 状態変更] ;吹っ飛んだ場合に状態を空中に設定
type = StateTypeSet
trigger1 = Time = 0
trigger1 = GetHitVar(yvel) != 0 || GetHitVar(fall)
trigger2 = Pos Y != 0
statetype = A

[State 5000, ステート変更]
type = ChangeState
trigger1 = HitShakeOver
trigger1 = GetHitVar(yvel) = 0 && !GetHitVar(fall)
value = 5001 ;立ちやられノックバック

[State 5000, ステート変更]
type = ChangeState
trigger1 = HitShakeOver
value = 5030

[State 5000, コントローラの振動 Light]
type = ForceFeedback
trigger1 = anim = 5000
trigger2 = anim = 5010
persistent = 0
time = 6
waveform = square

[State 5000, コントローラの振動 Medium]
type = ForceFeedback
trigger1 = anim = 5001
trigger2 = anim = 5011
persistent = 0
time = 8
waveform = sinesquare
ampl = 110,-1,-.3

[State 5000, コントローラの振動 Hard]
type = ForceFeedback
trigger1 = anim = 5012
trigger2 = anim = 5002
trigger3 = anim = 5030
persistent = 0
time = 15
waveform = sinesquare
ampl = 140

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	しゃがみやられ
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 5010]
type    = C
movetype= H
physics = N
velset = 0,0

[State 5010, アニメ変更] ;Light～Hard
type = ChangeAnim
trigger1 = Time = 0
trigger1 = GetHitVar(animtype) != [3,5]
value = 5020 + GetHitVar(animtype)

[State 5010, アニメ変更] ;吹っ飛び開始
type = ChangeAnim
trigger1 = Time = 0
trigger1 = GetHitVar(animtype) = [3,5]
value = 5030

[State 5010, アニメ変更] ;垂直吹っ飛び・対角吹っ飛び (オプション)
type = ChangeAnim
trigger1 = Time = 0
trigger1 = (GetHitVar(animtype) = [4,5]) && (SelfAnimExist(5047 + GetHitVar(animtype)))
value = 5047 + GetHitVar(animtype) ;5051 - 4 + type

[State 5010, アニメ変更]
type = ChangeAnim
trigger1 = Time > 0
value = anim

[State 5010, 状態変更] ;吹っ飛んだ場合に状態を空中に設定
type = StateTypeSet
triggerall = Time = 0
trigger1 = GetHitVar(yvel) != 0 || GetHitVar(fall)
trigger2 = Pos Y != 0
statetype = A

[State 5010, ステート変更] ;しゃがみやられノックバック
type = ChangeState
trigger1 = HitShakeOver
trigger1 = GetHitVar(yvel) = 0 && !GetHitVar(fall)
value = 5011

[State 5010, ステート変更] ;吹っ飛び開始
type = ChangeState
trigger1 = HitShakeOver
value = 5030

[State 5010, コントローラの振動 Light]
type = ForceFeedback
trigger1 = anim = 5020
persistent = 0
time = 6
waveform = square

[State 5010, コントローラの振動 Medium]
type = ForceFeedback
trigger1 = anim = 5021
persistent = 0
time = 8
waveform = sinesquare
ampl = 110,-1,-.3

[State 5010, コントローラの振動 Hard]
type = ForceFeedback
trigger1 = anim = 5022
persistent = 0
time = 15
waveform = sinesquare
ampl = 140

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	空中やられ
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 5020]
type    = A
movetype= H
physics = N
velset = 0,0

[State 5020, アニメ変更] ;Light～Hard
type = ChangeAnim
trigger1 = Time = 0
trigger1 = GetHitVar(animtype) != [3,5]
value = ifelse((GetHitVar(airtype) = 1),5000,5010) + GetHitVar(animtype)

[State 5020, アニメ変更] ;吹っ飛び開始
type = ChangeAnim
trigger1 = Time = 0
trigger1 = GetHitVar(animtype) = [3,5]
value = 5030

[State 5020, アニメ変更] ;垂直吹っ飛び・対角吹っ飛び (オプション)
type = ChangeAnim
trigger1 = Time = 0
trigger1 = (GetHitVar(animtype) = [4,5]) && (SelfAnimExist(5047 + GetHitVar(animtype)))
value = 5047 + GetHitVar(animtype) ;5051 - 4 + type

[State 5020, アニメ変更] ;Freeze anim
type = ChangeAnim
trigger1 = Time > 0
value = anim

[State 5020, ステート変更] ;硬直
type = ChangeState
trigger1 = HitShakeOver
value = 5030

[State 5020, コントローラの振動 Light]
type = ForceFeedback
trigger1 = anim = 5000
trigger2 = anim = 5010
persistent = 0
time = 6
waveform = square

[State 5020, コントローラの振動 Medium]
type = ForceFeedback
trigger1 = anim = 5001
trigger2 = anim = 5011
persistent = 0
time = 8
waveform = sinesquare
ampl = 110,-1,-.3

[State 5020, コントローラの振動 Hard]
type = ForceFeedback
trigger1 = anim = 5012
trigger2 = anim = 5002
trigger3 = anim = 5030
trigger4 = anim = [5051,5059]
persistent = 0
time = 15
waveform = sinesquare
ampl = 140

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	前進・後退
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 20]
type    = S
physics = S
sprpriority = 0

[State 20, 移動速度] ;前進する速度
type = VelSet
trigger1 = command = "holdfwd"
x = const(velocity.walk.fwd.x) ;定数で設定した速度

[State 20, 移動速度] ;後退する速度
type = VelSet
trigger1 = command = "holdback"
x = const(velocity.walk.back.x) ;定数で設定した速度

[State 20, アニメ変更] ;前進するアニメに変更
type = ChangeAnim
triggerall = vel x > 0
trigger1 = Anim != 20 && Anim != 5
trigger2 = Anim = 5 && AnimTime = 0
value = 20

[State 20, アニメ変更] ;後退するアニメに変更
type = ChangeAnim
triggerall = vel x < 0
trigger1 = Anim != 21 && Anim != 5
trigger2 = Anim = 5 && AnimTime = 0
value = 21

[State 20, 音]
type = PlaySnd
trigger1 = Time%8 = 0
value = 10, 0

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	ジャンプ中
;	・ジャンプ開始が終了すると同時にこのステートに飛びます。
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 50]
type    = A
physics = A
ctrl = 1

[State 50, アニメ変更] ;表示アニメの決定
type = ChangeAnim
trigger1 = Time = 0
value = ifelse((vel x)=0, 41, ifelse((vel x)>0, 42, 43))
;X軸の移動速度が0ならば41へ、マイナスならば42へ、それ以外なら43へ

[State 50, アニメ変更]
type = ChangeAnim
trigger1 = Vel y > -2
trigger1 = SelfAnimExist(anim + 3)
persistent = 0
value = Anim + 3

[State 50, 音]
type = PlaySnd
trigger1 = Time = 0
value = 10, 1

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	着地
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 52]
type    = S
physics = S
ctrl = 0
anim = 47

[State 52, 音]
type = PlaySnd
trigger1 = Time = 0
value = 10, 2

[State 52, エフェクト]
type = Explod
trigger1 = time = 0
anim = 10012
pos = -60, 10
postype = p1
scale = 0.5, 0.5
facing = 1
removetime = -2
sprpriority = 5

[State 52, エフェクト]
type = Explod
trigger1 = time = 0
anim = 10012
pos = 60, 10
postype = p1
scale = 0.5, 0.5
facing = -1
removetime = -2
sprpriority = 5

[State 52, エフェクト]
type = Explod
trigger1 = time = 0
anim = 10010
pos = 0, 0
postype = p1
scale = 1, 1
facing = -1
removetime = -2
sprpriority = -5

;--------------------↓ここから先はオプション用の記述

[State 52, アニメ変更]
type = ChangeAnim
triggerall = Time = 0
trigger1 = sysvar(1) = 0
value = 47

[State 52, アニメ変更]
type = ChangeAnim
triggerall = SelfAnimExist(48)
triggerall = Time = 0
trigger1 = sysvar(1) = 1
value = 48

[State 52, アニメ変更]
type = ChangeAnim
triggerall = SelfAnimExist(49)
triggerall = Time = 0
triggerall = PrevstateNo != [600,630]
trigger1 = sysvar(1) = -1
value = 49

[State 52, アニメ変更]
type = ChangeAnim
triggerall = Time = 0
triggerall = PrevStateNo = [600,630]
trigger1 = sysvar(1) = -1
value = 47

;--------------------↑ここまでオプション用の記述

[State 52, 移動速度] ;Y方向の速度を0に
type = VelSet
trigger1 = Time = 0
y = 0

[State 52, 軸位置] ;地上に戻す
type = PosSet
trigger1 = Time = 0
y = 0

[State 52, 変数を設定]
type = VarSet
trigger1 = AnimTime = 0
sysvar(1) = 0

[State 52, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	立ちガード（ヒット硬直中）
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 150]
type    = S
movetype= H
physics = N
velset = 0,0

[State -2,エフェクト]
type = Explod
trigger1 = time = 0
anim = 10140
pos = 50, -60
postype = p1
scale = 1, 2
removetime = -2
sprpriority = 5
ownpal = 1

[State -2,ガード音]
type = PlaySnd
trigger1 = time = 0
value = 2, 6

[State -2,連続ガード補正]
type = VarAdd
triggerall = time = 0
triggerall = fvar(24) > 0.25
trigger1 = StateNo = [150,155]
trigger1 = PrevStateNo = [150,155]
fv = 24
value = -0.25
ignorehitpause = 1

[State 150, アニメ変更]
type = ChangeAnim
trigger1 = 1
value = 150

[State 150, ステート変更]
type = ChangeState
trigger1 = HitShakeOver
value = 151+ 2*(command = "holddown")

[State 150, 状態変更] ;立ち→しゃがみ
type = StateTypeSet
trigger1 = statetype = S && command = "holddown"
statetype = C
physics = C

[State 150, 状態変更] ;しゃがみ→立ち
type = StateTypeSet
trigger1 = statetype = C && command != "holddown"
statetype = S
physics = S

[State 150, コントローラの振動] ;使えるのか不明。消しても問題ないかも
type = ForceFeedback
trigger1 = time = 0
waveform = square
time = 3

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	しゃがみガード（ヒット硬直中）
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 152]
type    = C
movetype= H
physics = N
velset = 0,0

[State -2,エフェクト]
type = Explod
trigger1 = time = 0
anim = 10140
pos = 50, -30
postype = p1
scale = 1, 2
removetime = -2
sprpriority = 5
ownpal = 1

[State -2,ガード音]
type = PlaySnd
trigger1 = time = 0
value = 2, 6

[State -2,連続ガード補正]
type = VarAdd
triggerall = time = 0
triggerall = fvar(24) > 0.25
trigger1 = StateNo = [150,155]
trigger1 = PrevStateNo = [150,155]
fv = 24
value = -0.25
ignorehitpause = 1

[State 152, アニメ変更]
type = ChangeAnim
trigger1 = 1
value = 151

[State 152, ステート変更]
type = ChangeState
trigger1 = HitShakeOver
value = 151+ 2*(command = "holddown")

[State 152, 状態変更] ;立ち→しゃがみ
type = StateTypeSet
trigger1 = statetype = S && command = "holddown"
statetype = C
physics = C

[State 152, 状態変更] ;しゃがみ→立ち
type = StateTypeSet
trigger1 = statetype = C && command != "holddown"
statetype = S
physics = S

[State 152, コントローラの振動]
type = ForceFeedback
trigger1 = time = 0
waveform = square
time = 4

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	空中ガード（ヒット硬直中）
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 154]
type    = A
movetype= H
physics = N
velset = 0,0

[State -2,エフェクト]
type = Explod
trigger1 = time = 0
anim = 10140
pos = 50, -30
postype = p1
scale = 1, 2
removetime = -2
sprpriority = 5
ownpal = 1

[State -2,ガード音]
type = PlaySnd
trigger1 = time = 0
value = 2, 6

[State -2,連続ガード補正]
type = VarAdd
triggerall = time = 0
triggerall = fvar(24) > 0.25
trigger1 = StateNo = [150,155]
trigger1 = PrevStateNo = [150,155]
fv = 24
value = -0.25
ignorehitpause = 1

[State 154, アニメ変更]
type = ChangeAnim
trigger1 = 1
value = 152

[State 154, ステート変更]
type = ChangeState
trigger1 = HitShakeOver
value = 155 ;AGUARDHIT2

[State 154, コントローラの振動]
type = ForceFeedback
trigger1 = time = 0
waveform = square
time = 4

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	前ダッシュ
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 100]
type     = S
movetype = A
physics  = N
velset   = 0,0
ctrl     = 0
anim     = 100
sprpriority = 2

[State 100, 音]
type = PlaySnd
trigger1 = Time = 0
value = 10, 3

[State 100, エフェクト]
type = Explod
trigger1 = time = 0
anim = 10012
pos = -60, 10
postype = p1
scale = 0.5, 0.5
removetime = -2
sprpriority = 5

[State 100, 移動速度]
type = VelSet
trigger1 = Time = 0
x = const(velocity.run.fwd.x)
y = const(velocity.run.fwd.y)

[State 100, ヒット定義]
type = HitDef
trigger1 = AnimElem = 9
attr = S, NA
hitflag = MAFD
guardflag = MA
animtype = diagup
priority = 5,Hit
damage = ceil(58 * (fVar(10) * fVar(11) * fVar(12) * fVar(13)))
pausetime = 10, 10
sparkno = S10001
guard.sparkno = S10014
sparkxy = -20, -40
hitsound = S2, 2
guardsound = 6, 0
ground.type = High
ground.slidetime = 10
guard.slidetime = 10
ground.hittime = 10
air.hittime = 10
guard.ctrltime = 10
yaccel = .5
ground.velocity = -4, -6
guard.velocity = -4.5
air.velocity = -4, -4.0 + fVar(20)
down.velocity = -4, 0
sprpriority = 1
fall = 1
air.fall = 1
fall.recover = 0
kill = 1
getpower = 80, 40
givepower = 40, 0
fall.envshake.time = ifelse(p2statetype = L,0,10)
fall.envshake.freq = ifelse(p2statetype = L,0,15)
fall.envshake.ampl = ifelse(p2statetype = L,0,20)
fall.envshake.phase = ifelse(p2statetype = L,0,20)

[State 100, ステート変更]
type = ChangeState
trigger1 = Time >= 20
value = 101

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	前ダッシュ終わり
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 101]
type    = S
physics = S
ctrl = 0
anim = 101

[State 101, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	バックステップ
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 105]
type    = C
physics = N
ctrl = 0
anim = 105
sprpriority = 1

[State 105, 無敵]
type = NotHitBy
trigger1 = time = 0
value = SCA
time = 6

[State 100, 音]
type = PlaySnd
trigger1 = Time = 0
value = 10, 4

[State 105, 移動速度]
type = VelSet
trigger1 = Time = 0
x = const(velocity.run.back.x)
y = const(velocity.run.back.y)

[State 105, ステート変更]
type = ChangeState
trigger1 = Time >= 20
value = 106

;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
;	バックステップ終わり
;━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[Statedef 106]
type    = S
physics = S
ctrl = 0
anim = 106

[State 106, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;===========================================================================
; 基本行動
;===========================================================================
;---------------------------------------------------------------------------
;タイムオーバー（負けた時）
[Statedef 170]
type = S
ctrl = 0
anim = 170
velset = 0,0

[State 170, 無敵]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

[State 170, 声]
type = PlaySnd
trigger1 = Time = 0
value = 101, 1
persistent = 0
ignorehitpause = 1

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
;勝利ポーズ分岐（common1.cnsには無いけど、これもコモンステート）
[Statedef 180]
type = S

[State 180, ステート変更]
type = ChangeState
triggerall = Time = 0
trigger1 = MatchOver = 0
value = 181

[State 180, ステート変更]
type = ChangeState
triggerall = Time = 0
trigger1 = MatchOver = 1
value = 182

; 勝った動作1
[Statedef 181]
type = S
ctrl = 0
anim = 181
velset = 0,0

[State 181, 無敵]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

[State 181, 声]
type = PlaySnd
trigger1 = Time = 0
value = 102, 0

[State 181,AssertSpecial]
type = AssertSpecial
trigger1 = Time < 120
flag = roundnotover

; 勝った動作2
[Statedef 182]
type = S
ctrl = 0
anim = 182
velset = 0,0

[State 182, 無敵]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

[State 182, 声]
type = PlaySnd
trigger1 = Time%30 = 0
value = 100, 2

[State 182,AssertSpecial]
type = AssertSpecial
trigger1 = Time < 120
flag = roundnotover

;---------------------------------------------------------------------------
;イントロ分岐
[Statedef 190]
type = S
ctrl = 0

[State 190]
type = null;VarRandom
trigger1 = 1
v = 3
range = 191,192

;汎用イントロ
[State 190]
type = ChangeState
Trigger1 = Time = 1
Trigger1 = stateno != 5900
value = 191;var(3)
;191~194くらい

;イントロ1
[Statedef 191]
type = S
ctrl = 0
anim = 191
velset = 0,0

[State 191, アラーム]
type = PlaySnd
trigger1 = Time = 1
value = 103, 0

[State 191, アニメ変更];バトル画面に切り替わった瞬間のフェードインの時、アニメを固定している
type = ChangeAnim
trigger1 = RoundState = 0
value = 191

[State 191, 特殊効果];試合が開始するまではこのコントローラを使おう（※２）
type = AssertSpecial
trigger1 = 1
flag = Intro ;イントロの状態

[State 191, 音]
type = PlaySnd
trigger1 = AnimTime = 0
value = 10, 0

[State -2, 対戦車戦用意]
type = PlaySnd
trigger1 = AnimTime = 0
value = 103, 1
volume = 150

[State 191, ステート変更];アニメーションが終われば「通常立ち」のステートに変更する
type = ChangeState
trigger1 = AnimTime = 0
value = 0

;---------------------------------------------------------------------------
;挑発
[Statedef 195]
type = S
ctrl = 0
anim = 181
velset = 0,0

[State 195, 声]
type = PlaySnd
trigger1 = Time = 0
value = 100, ifelse(Random >= 500,2,4)

[state 195, コントロール]
type = ctrlSet
trigger1 = time >= 30
value = 1

;---------------------------------------------------------------------------
;受身
[Statedef 4000]
type = S
ctrl = 0
anim = 4000
velset = -2,0

[State 4000, ポジション修正]
type = PosSet
trigger1 = 1
y = 0

[State 4000, 音]
type = PlaySnd
trigger1 = Time = 0
value = 10, 3

[State 4000, 色]
type = PalFX
trigger1 = Time = 0
time = 30
add = 100,100,100
sinadd = 255,255,255,20
invertall = 0
IgnoreHitPause = 1
Persistent = 4

[State 4000, ステート変更]
type = ChangeState
trigger1 = time >= 30
value = 4001
ctrl = 0

[Statedef 4001]
type = S
ctrl = 0
anim = 4001
velset = 0,0

[State 4001, 無敵]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1 

[State 4001, ポジション修正]
type = PosSet
trigger1 = Pos Y >= 0
y = 0

[State 4001, ステート変更]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
;防禦崩壊
[Statedef 4100]
type = S
ctrl = 0
anim = 4100
velset = 0,0

[State 4100, ポジション修正]
type = PosSet
trigger1 = Pos Y >= 0
y = 0

[State 4100, ステート変更]
type = ChangeState
trigger1 = time >= 60
value = 0
ctrl = 1

;空中防禦崩壊
[Statedef 4101]
type     = A
movetype = A
physics  = N
ctrl = 0
anim = 4100
velset = 0,0

[State 4101, 速度]
type = VelSet
trigger1 = time = 0
x = -4
y = -4

[state 4101, 重力]
type = VelAdd
trigger1 = Animelem = 2>= 0
y = 0.6

[State 4101, 着地]
type = ChangeState
trigger1 = Vel Y > 5 && Pos Y >= 5
value = 4100



























